トランザクション…複数のSQL文をひとかたまりとして処理する時の、ひとかたまりのこと。
　　　　　　　　 途中で中断されない、他の処理が割り込めないようにする。
トランザクション制御…DBMSがトランザクションを扱うこと。

トランザクションの原子性…トランザクションを不可分（分けられない、実行していないか実行ずみかしかない）なものにする性質
　　　　　　　　　　　　 トランザクションの中の処理で生まれたデータは仮のものとして扱い、トランザクションが終わり確定処理（コミット）が行われると全てのデータが確定される。
　　　　　　　　　　　　 トランザクションの途中で処理が中断されると、仮のデータは全て削除されなかったことになる。なかったことになる動作をロールバックという。

トランザクションを使うための指示
BEGIN…開始の指示
COMMIT…終了の指示　ここまでを一つのトランザクションにし、変更を確定する。
ROLLBACK…終了の指示　ここまでを一つのトランザクションにし、変更を取り消す。

BEGIN;
-- 処理1: アーカイブテーブルへコピー
INSERT INTO 家計簿アーカイブ
SELECT * FROM 家計簿 WHERE 日付 <= '2018-01-31';
-- 処理2: 家計簿テーブルから削除
DELETE FROM 家計簿 WHERE 日付 <= '2018-01-31';
COMMIT;



多くのデータベースは利用者が同時にSQL文を送ることが多いので、同時操作中のどれかでロールバックが起きた場合、不確実なデータが発生する可能性がある。
副作用パターン
1　ダーティーリード
まだコミットされていない未確定の変更を、他の人が読めてしまうこと。
１つ目のSQL文で変更した箇所がコミットされる前に2つ目のSQL文が実行されると仮の変更からデータを抽出してしまうため、1つ目の処理でロールバックが起きた際などに不確実なデータができてしまう。

2 反復不能読み取り
SELECT文を実行した後にUPDATE文で他の人がデータを書き換えた場合、次回SELECTの時に結果が異なってしまうこと
2つのSELECT文でデータを抽出している時に、1つ目のSELECT文の直後にUPDATEされた場合、2つめのSELECT文と1つ目のSELECT文のデータの整合性が崩れる

3 ファントムリード
反復不能読み取りのINSERT版

これらの副作用は、トランザクションによって解決できる。
DBMSはトランザクションの分離性を維持するためにロックという仕組みを使っている。
ロック…あるトランザクションで読み書きしている行に鍵をかけ、他のトランザクションからは読み書きできないようにすること
　　　 ロックしている間、他のトランザクションは処理を待ち続けるため、ロックを使用しすぎると処理速度遅くなってしまう。

トランザクションによる副作用抑制と処理速度低減をトランザクション分離レベルとして指定することができる。
ほとんどのDBMSではダーティリードの発生をなくし、反復不能読み取りとファントムリードが発生する可能性があるが処理速度がはやい「READ COMMITTED」という分離レベルと使用している。
分離レベルは変更が可能。


明示的なロックの種類
行ロック…特定の一行だけをロックする
表ロック…特定のテーブル全体をロックする
データベースロック…データベース全体をロックする

デッドロック…異なるトランザクションでロックする対象がループしてしまい、永遠にロックされずづけること
　　　　　　 トランザクションの時間を短くする、同じ順番でロックされるようにすることでデッドロックを予防できる。

